ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f767zi_usart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.usart2_default_init,"ax",%progbits
  18              		.align	1
  19              		.global	usart2_default_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	usart2_default_init:
  25              	.LFB0:
  26              		.file 1 "./Src/stm32f767zi_usart.c"
   1:./Src/stm32f767zi_usart.c **** /**
   2:./Src/stm32f767zi_usart.c ****  * @file stm32f767zi_usart.c
   3:./Src/stm32f767zi_usart.c ****  * @author zheyi613 (zheyi880613@gmail.com)
   4:./Src/stm32f767zi_usart.c ****  * @brief usart/uart
   5:./Src/stm32f767zi_usart.c ****  * @date 2022-08-10
   6:./Src/stm32f767zi_usart.c ****  */
   7:./Src/stm32f767zi_usart.c **** 
   8:./Src/stm32f767zi_usart.c **** #include "stm32f767zi_usart.h"
   9:./Src/stm32f767zi_usart.c **** 
  10:./Src/stm32f767zi_usart.c **** void usart2_default_init(void)
  11:./Src/stm32f767zi_usart.c **** {
  27              		.loc 1 11 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  12:./Src/stm32f767zi_usart.c **** 	// Enable clock access to GPIOD.
  13:./Src/stm32f767zi_usart.c **** 	RCC->AHB1ENR |= GPIOD_CLK_EN;
  39              		.loc 1 13 15
  40 0004 174B     		ldr	r3, .L2
  41 0006 1B6B     		ldr	r3, [r3, #48]
  42 0008 164A     		ldr	r2, .L2
  43 000a 43F00803 		orr	r3, r3, #8
  44 000e 1363     		str	r3, [r2, #48]
  14:./Src/stm32f767zi_usart.c **** 	// Set PD5 (Tx) mode to alternate function.
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 2


  15:./Src/stm32f767zi_usart.c **** 	gpio_set_mode(GPIOD, USART2_TX_POS, GPIO_MODE_ALTFN);
  45              		.loc 1 15 2
  46 0010 0222     		movs	r2, #2
  47 0012 0521     		movs	r1, #5
  48 0014 1448     		ldr	r0, .L2+4
  49 0016 FFF7FEFF 		bl	gpio_set_mode
  16:./Src/stm32f767zi_usart.c **** 	// Set PD6 (Rx) mode to alternate function.
  17:./Src/stm32f767zi_usart.c **** 	gpio_set_mode(GPIOD, USART2_RX_POS, GPIO_MODE_ALTFN);
  50              		.loc 1 17 2
  51 001a 0222     		movs	r2, #2
  52 001c 0621     		movs	r1, #6
  53 001e 1248     		ldr	r0, .L2+4
  54 0020 FFF7FEFF 		bl	gpio_set_mode
  18:./Src/stm32f767zi_usart.c **** 	// Set alternate function to USART. GPIO_AFRH = AF7(0b0111) << 0 | AF7 << 4
  19:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(GPIOD->AFR[0], 0xFFU, (USART3_AF << 20) | (USART3_AF << 24));
  55              		.loc 1 19 2
  56 0024 104B     		ldr	r3, .L2+4
  57 0026 1A6A     		ldr	r2, [r3, #32]
  58 0028 104B     		ldr	r3, .L2+8
  59 002a 1340     		ands	r3, r3, r2
  60 002c 0E4A     		ldr	r2, .L2+4
  61 002e 43F0EE63 		orr	r3, r3, #124780544
  62 0032 1362     		str	r3, [r2, #32]
  20:./Src/stm32f767zi_usart.c **** 	// Enable clock to USART3 module
  21:./Src/stm32f767zi_usart.c **** 	RCC->APB1ENR |= USART2_CLK_EN;
  63              		.loc 1 21 15
  64 0034 0B4B     		ldr	r3, .L2
  65 0036 1B6C     		ldr	r3, [r3, #64]
  66 0038 0A4A     		ldr	r2, .L2
  67 003a 43F40033 		orr	r3, r3, #131072
  68 003e 1364     		str	r3, [r2, #64]
  22:./Src/stm32f767zi_usart.c **** 	// Configure USART parameters (TE, RE, PS, PCE, M, STOP)
  23:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(USART2->CR1, USART_CR1_TE_MASK | USART_CR1_RE_MASK,
  69              		.loc 1 23 2
  70 0040 0B4B     		ldr	r3, .L2+12
  71 0042 1B68     		ldr	r3, [r3]
  72 0044 0A4A     		ldr	r2, .L2+12
  73 0046 43F00C03 		orr	r3, r3, #12
  74 004a 1360     		str	r3, [r2]
  24:./Src/stm32f767zi_usart.c **** 		   (1 << USART_CR1_TE_POS) | (1 << USART_CR1_RE_POS));
  25:./Src/stm32f767zi_usart.c **** 	// Set baud rate
  26:./Src/stm32f767zi_usart.c **** 	USART2->BRR = (PERIPH_CLK + (115200 / 2U)) / 115200;
  75              		.loc 1 26 8
  76 004c 084B     		ldr	r3, .L2+12
  77              		.loc 1 26 14
  78 004e 8B22     		movs	r2, #139
  79 0050 DA60     		str	r2, [r3, #12]
  27:./Src/stm32f767zi_usart.c **** 	// enable USART3
  28:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(USART2->CR1, USART_CR1_UE_MASK, 1);
  80              		.loc 1 28 2
  81 0052 074B     		ldr	r3, .L2+12
  82 0054 1B68     		ldr	r3, [r3]
  83 0056 064A     		ldr	r2, .L2+12
  84 0058 43F00103 		orr	r3, r3, #1
  85 005c 1360     		str	r3, [r2]
  29:./Src/stm32f767zi_usart.c **** }
  86              		.loc 1 29 1
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 3


  87 005e 00BF     		nop
  88 0060 80BD     		pop	{r7, pc}
  89              	.L3:
  90 0062 00BF     		.align	2
  91              	.L2:
  92 0064 00380240 		.word	1073887232
  93 0068 000C0240 		.word	1073875968
  94 006c 00FF8FF8 		.word	-124780800
  95 0070 00440040 		.word	1073759232
  96              		.cfi_endproc
  97              	.LFE0:
  99              		.section	.text.usart3_default_init,"ax",%progbits
 100              		.align	1
 101              		.global	usart3_default_init
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 106              	usart3_default_init:
 107              	.LFB1:
  30:./Src/stm32f767zi_usart.c **** 
  31:./Src/stm32f767zi_usart.c **** // word length: 8
  32:./Src/stm32f767zi_usart.c **** // transmit enable: enable
  33:./Src/stm32f767zi_usart.c **** // parity: none
  34:./Src/stm32f767zi_usart.c **** // stop bits: 1
  35:./Src/stm32f767zi_usart.c **** // baud rate: 115200
  36:./Src/stm32f767zi_usart.c **** void usart3_default_init(void)
  37:./Src/stm32f767zi_usart.c **** {
 108              		.loc 1 37 1
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 1, uses_anonymous_args = 0
 112 0000 80B5     		push	{r7, lr}
 113              	.LCFI2:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 00AF     		add	r7, sp, #0
 118              	.LCFI3:
 119              		.cfi_def_cfa_register 7
  38:./Src/stm32f767zi_usart.c **** 	// Enable clock access to GPIOD.
  39:./Src/stm32f767zi_usart.c **** 	RCC->AHB1ENR |= GPIOD_CLK_EN;
 120              		.loc 1 39 15
 121 0004 174B     		ldr	r3, .L5
 122 0006 1B6B     		ldr	r3, [r3, #48]
 123 0008 164A     		ldr	r2, .L5
 124 000a 43F00803 		orr	r3, r3, #8
 125 000e 1363     		str	r3, [r2, #48]
  40:./Src/stm32f767zi_usart.c **** 	// Set PD8 (Tx) mode to alternate function.
  41:./Src/stm32f767zi_usart.c **** 	gpio_set_mode(GPIOD, USART3_TX_POS, GPIO_MODE_ALTFN);
 126              		.loc 1 41 2
 127 0010 0222     		movs	r2, #2
 128 0012 0821     		movs	r1, #8
 129 0014 1448     		ldr	r0, .L5+4
 130 0016 FFF7FEFF 		bl	gpio_set_mode
  42:./Src/stm32f767zi_usart.c **** 	// Set PD9 (Rx) mode to alternate function.
  43:./Src/stm32f767zi_usart.c **** 	gpio_set_mode(GPIOD, USART3_RX_POS, GPIO_MODE_ALTFN);
 131              		.loc 1 43 2
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 4


 132 001a 0222     		movs	r2, #2
 133 001c 0921     		movs	r1, #9
 134 001e 1248     		ldr	r0, .L5+4
 135 0020 FFF7FEFF 		bl	gpio_set_mode
  44:./Src/stm32f767zi_usart.c **** 	// Set alternate function to USART. GPIO_AFRH = AF7(0b0111) << 0 | AF7 << 4
  45:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(GPIOD->AFR[1], 0xFFU, USART3_AF | (USART3_AF << 4));
 136              		.loc 1 45 2
 137 0024 104B     		ldr	r3, .L5+4
 138 0026 5B6A     		ldr	r3, [r3, #36]
 139 0028 23F0FF03 		bic	r3, r3, #255
 140 002c 0E4A     		ldr	r2, .L5+4
 141 002e 43F07703 		orr	r3, r3, #119
 142 0032 5362     		str	r3, [r2, #36]
  46:./Src/stm32f767zi_usart.c **** 	// Enable clock to USART3 module
  47:./Src/stm32f767zi_usart.c **** 	RCC->APB1ENR |= USART3_CLK_EN;
 143              		.loc 1 47 15
 144 0034 0B4B     		ldr	r3, .L5
 145 0036 1B6C     		ldr	r3, [r3, #64]
 146 0038 0A4A     		ldr	r2, .L5
 147 003a 43F48023 		orr	r3, r3, #262144
 148 003e 1364     		str	r3, [r2, #64]
  48:./Src/stm32f767zi_usart.c **** 	// Configure USART parameters (TE, RE, PS, PCE, M, STOP)
  49:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(USART3->CR1, USART_CR1_TE_MASK | USART_CR1_RE_MASK,
 149              		.loc 1 49 2
 150 0040 0A4B     		ldr	r3, .L5+8
 151 0042 1B68     		ldr	r3, [r3]
 152 0044 094A     		ldr	r2, .L5+8
 153 0046 43F00C03 		orr	r3, r3, #12
 154 004a 1360     		str	r3, [r2]
  50:./Src/stm32f767zi_usart.c **** 		   (1 << USART_CR1_TE_POS) | (1 << USART_CR1_RE_POS));
  51:./Src/stm32f767zi_usart.c **** 	// Set baud rate
  52:./Src/stm32f767zi_usart.c **** 	USART3->BRR = (PERIPH_CLK + (115200 / 2U)) / 115200;
 155              		.loc 1 52 8
 156 004c 074B     		ldr	r3, .L5+8
 157              		.loc 1 52 14
 158 004e 8B22     		movs	r2, #139
 159 0050 DA60     		str	r2, [r3, #12]
  53:./Src/stm32f767zi_usart.c **** 	// enable USART3
  54:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(USART3->CR1, USART_CR1_UE_MASK, 1);
 160              		.loc 1 54 2
 161 0052 064B     		ldr	r3, .L5+8
 162 0054 1B68     		ldr	r3, [r3]
 163 0056 054A     		ldr	r2, .L5+8
 164 0058 43F00103 		orr	r3, r3, #1
 165 005c 1360     		str	r3, [r2]
  55:./Src/stm32f767zi_usart.c **** }
 166              		.loc 1 55 1
 167 005e 00BF     		nop
 168 0060 80BD     		pop	{r7, pc}
 169              	.L6:
 170 0062 00BF     		.align	2
 171              	.L5:
 172 0064 00380240 		.word	1073887232
 173 0068 000C0240 		.word	1073875968
 174 006c 00480040 		.word	1073760256
 175              		.cfi_endproc
 176              	.LFE1:
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 5


 178              		.section	.text.usart3_interrupt_default_init,"ax",%progbits
 179              		.align	1
 180              		.global	usart3_interrupt_default_init
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 185              	usart3_interrupt_default_init:
 186              	.LFB2:
  56:./Src/stm32f767zi_usart.c **** 
  57:./Src/stm32f767zi_usart.c **** void usart3_interrupt_default_init(void)
  58:./Src/stm32f767zi_usart.c **** {
 187              		.loc 1 58 1
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 80B5     		push	{r7, lr}
 192              	.LCFI4:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 00AF     		add	r7, sp, #0
 197              	.LCFI5:
 198              		.cfi_def_cfa_register 7
  59:./Src/stm32f767zi_usart.c **** 	// Enable clock access to GPIOD.
  60:./Src/stm32f767zi_usart.c **** 	RCC->AHB1ENR |= GPIOD_CLK_EN;
 199              		.loc 1 60 15
 200 0004 1E4B     		ldr	r3, .L8
 201 0006 1B6B     		ldr	r3, [r3, #48]
 202 0008 1D4A     		ldr	r2, .L8
 203 000a 43F00803 		orr	r3, r3, #8
 204 000e 1363     		str	r3, [r2, #48]
  61:./Src/stm32f767zi_usart.c **** 	// Set PD8 (Tx) mode to alternate function.
  62:./Src/stm32f767zi_usart.c **** 	gpio_set_mode(GPIOD, USART3_TX_POS, GPIO_MODE_ALTFN);
 205              		.loc 1 62 2
 206 0010 0222     		movs	r2, #2
 207 0012 0821     		movs	r1, #8
 208 0014 1B48     		ldr	r0, .L8+4
 209 0016 FFF7FEFF 		bl	gpio_set_mode
  63:./Src/stm32f767zi_usart.c **** 	// Set PD9 (Rx) mode to alternate function.
  64:./Src/stm32f767zi_usart.c **** 	gpio_set_mode(GPIOD, USART3_RX_POS, GPIO_MODE_ALTFN);
 210              		.loc 1 64 2
 211 001a 0222     		movs	r2, #2
 212 001c 0921     		movs	r1, #9
 213 001e 1948     		ldr	r0, .L8+4
 214 0020 FFF7FEFF 		bl	gpio_set_mode
  65:./Src/stm32f767zi_usart.c **** 	// Set alternate function to USART. GPIO_AFRH = AF7(0b0111) << 0 | AF7 << 4
  66:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(GPIOD->AFR[1], 0xFFU, USART3_AF | (USART3_AF << 4));
 215              		.loc 1 66 2
 216 0024 174B     		ldr	r3, .L8+4
 217 0026 5B6A     		ldr	r3, [r3, #36]
 218 0028 23F0FF03 		bic	r3, r3, #255
 219 002c 154A     		ldr	r2, .L8+4
 220 002e 43F07703 		orr	r3, r3, #119
 221 0032 5362     		str	r3, [r2, #36]
  67:./Src/stm32f767zi_usart.c **** 	// Enable clock to USART3 module
  68:./Src/stm32f767zi_usart.c **** 	RCC->APB1ENR |= USART3_CLK_EN;
 222              		.loc 1 68 15
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 6


 223 0034 124B     		ldr	r3, .L8
 224 0036 1B6C     		ldr	r3, [r3, #64]
 225 0038 114A     		ldr	r2, .L8
 226 003a 43F48023 		orr	r3, r3, #262144
 227 003e 1364     		str	r3, [r2, #64]
  69:./Src/stm32f767zi_usart.c **** 	// Configure USART parameters (TE, RE, PS, PCE, M, STOP)
  70:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(USART3->CR1, USART_CR1_TE_MASK | USART_CR1_RE_MASK,
 228              		.loc 1 70 2
 229 0040 114B     		ldr	r3, .L8+8
 230 0042 1B68     		ldr	r3, [r3]
 231 0044 104A     		ldr	r2, .L8+8
 232 0046 43F00C03 		orr	r3, r3, #12
 233 004a 1360     		str	r3, [r2]
  71:./Src/stm32f767zi_usart.c **** 		   (1 << USART_CR1_TE_POS) | (1 << USART_CR1_RE_POS));
  72:./Src/stm32f767zi_usart.c **** 	// Set baud rate
  73:./Src/stm32f767zi_usart.c **** 	USART3->BRR = (PERIPH_CLK + (115200 / 2U)) / 115200;
 234              		.loc 1 73 8
 235 004c 0E4B     		ldr	r3, .L8+8
 236              		.loc 1 73 14
 237 004e 8B22     		movs	r2, #139
 238 0050 DA60     		str	r2, [r3, #12]
  74:./Src/stm32f767zi_usart.c **** 	// enable USART3
  75:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(USART3->CR1, USART_CR1_UE_MASK, 1);
 239              		.loc 1 75 2
 240 0052 0D4B     		ldr	r3, .L8+8
 241 0054 1B68     		ldr	r3, [r3]
 242 0056 0C4A     		ldr	r2, .L8+8
 243 0058 43F00103 		orr	r3, r3, #1
 244 005c 1360     		str	r3, [r2]
  76:./Src/stm32f767zi_usart.c **** 	// Enable USART TXE interrupt
  77:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(USART3->CR1, USART_CR1_TXEIE_MASK, (1 << USART_CR1_TXEIE_POS));
 245              		.loc 1 77 2
 246 005e 0A4B     		ldr	r3, .L8+8
 247 0060 1B68     		ldr	r3, [r3]
 248 0062 094A     		ldr	r2, .L8+8
 249 0064 43F08003 		orr	r3, r3, #128
 250 0068 1360     		str	r3, [r2]
  78:./Src/stm32f767zi_usart.c **** 	// Enable USART RXNE interrupt
  79:./Src/stm32f767zi_usart.c **** 	MODIFY_REG(USART3->CR1, USART_CR1_RXNEIE_MASK, (1 << USART_CR1_RXNEIE_POS));
 251              		.loc 1 79 2
 252 006a 074B     		ldr	r3, .L8+8
 253 006c 1B68     		ldr	r3, [r3]
 254 006e 064A     		ldr	r2, .L8+8
 255 0070 43F02003 		orr	r3, r3, #32
 256 0074 1360     		str	r3, [r2]
  80:./Src/stm32f767zi_usart.c **** 	// Enable USART interrupt in NVIC
  81:./Src/stm32f767zi_usart.c **** 	NVIC->ISER[(((uint32_t)USART3_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)USART3_IRQn) & 0x1FUL
 257              		.loc 1 81 6
 258 0076 054B     		ldr	r3, .L8+12
 259              		.loc 1 81 47
 260 0078 8022     		movs	r2, #128
 261 007a 5A60     		str	r2, [r3, #4]
  82:./Src/stm32f767zi_usart.c **** }
 262              		.loc 1 82 1
 263 007c 00BF     		nop
 264 007e 80BD     		pop	{r7, pc}
 265              	.L9:
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 7


 266              		.align	2
 267              	.L8:
 268 0080 00380240 		.word	1073887232
 269 0084 000C0240 		.word	1073875968
 270 0088 00480040 		.word	1073760256
 271 008c 00E100E0 		.word	-536813312
 272              		.cfi_endproc
 273              	.LFE2:
 275              		.section	.text.usart_write,"ax",%progbits
 276              		.align	1
 277              		.global	usart_write
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 282              	usart_write:
 283              	.LFB3:
  83:./Src/stm32f767zi_usart.c **** 
  84:./Src/stm32f767zi_usart.c **** void usart_write(USART_reg_t *USARTx, uint8_t value)
  85:./Src/stm32f767zi_usart.c **** {
 284              		.loc 1 85 1
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 8
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 289 0000 80B4     		push	{r7}
 290              	.LCFI6:
 291              		.cfi_def_cfa_offset 4
 292              		.cfi_offset 7, -4
 293 0002 83B0     		sub	sp, sp, #12
 294              	.LCFI7:
 295              		.cfi_def_cfa_offset 16
 296 0004 00AF     		add	r7, sp, #0
 297              	.LCFI8:
 298              		.cfi_def_cfa_register 7
 299 0006 7860     		str	r0, [r7, #4]
 300 0008 0B46     		mov	r3, r1
 301 000a FB70     		strb	r3, [r7, #3]
  86:./Src/stm32f767zi_usart.c **** 	// Make sure transmit data register is empty
  87:./Src/stm32f767zi_usart.c **** 	while (!(USARTx->ISR & USART_ISR_TXE))
 302              		.loc 1 87 8
 303 000c 00BF     		nop
 304              	.L11:
 305              		.loc 1 87 17 discriminator 1
 306 000e 7B68     		ldr	r3, [r7, #4]
 307 0010 DB69     		ldr	r3, [r3, #28]
 308              		.loc 1 87 23 discriminator 1
 309 0012 03F08003 		and	r3, r3, #128
 310              		.loc 1 87 8 discriminator 1
 311 0016 002B     		cmp	r3, #0
 312 0018 F9D0     		beq	.L11
  88:./Src/stm32f767zi_usart.c **** 		;
  89:./Src/stm32f767zi_usart.c **** 	// Write value into transmit data register
  90:./Src/stm32f767zi_usart.c **** 	USARTx->TDR = value;
 313              		.loc 1 90 14
 314 001a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 315 001c 7B68     		ldr	r3, [r7, #4]
 316 001e 9A62     		str	r2, [r3, #40]
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 8


  91:./Src/stm32f767zi_usart.c **** }
 317              		.loc 1 91 1
 318 0020 00BF     		nop
 319 0022 0C37     		adds	r7, r7, #12
 320              	.LCFI9:
 321              		.cfi_def_cfa_offset 4
 322 0024 BD46     		mov	sp, r7
 323              	.LCFI10:
 324              		.cfi_def_cfa_register 13
 325              		@ sp needed
 326 0026 80BC     		pop	{r7}
 327              	.LCFI11:
 328              		.cfi_restore 7
 329              		.cfi_def_cfa_offset 0
 330 0028 7047     		bx	lr
 331              		.cfi_endproc
 332              	.LFE3:
 334              		.section	.text.usart_read,"ax",%progbits
 335              		.align	1
 336              		.global	usart_read
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 341              	usart_read:
 342              	.LFB4:
  92:./Src/stm32f767zi_usart.c **** 
  93:./Src/stm32f767zi_usart.c **** uint8_t usart_read(USART_reg_t *USARTx)
  94:./Src/stm32f767zi_usart.c **** {
 343              		.loc 1 94 1
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 8
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347              		@ link register save eliminated.
 348 0000 80B4     		push	{r7}
 349              	.LCFI12:
 350              		.cfi_def_cfa_offset 4
 351              		.cfi_offset 7, -4
 352 0002 83B0     		sub	sp, sp, #12
 353              	.LCFI13:
 354              		.cfi_def_cfa_offset 16
 355 0004 00AF     		add	r7, sp, #0
 356              	.LCFI14:
 357              		.cfi_def_cfa_register 7
 358 0006 7860     		str	r0, [r7, #4]
  95:./Src/stm32f767zi_usart.c **** 	while (!(USARTx->ISR & USART_ISR_RXNE))
 359              		.loc 1 95 8
 360 0008 00BF     		nop
 361              	.L13:
 362              		.loc 1 95 17 discriminator 1
 363 000a 7B68     		ldr	r3, [r7, #4]
 364 000c DB69     		ldr	r3, [r3, #28]
 365              		.loc 1 95 23 discriminator 1
 366 000e 03F02003 		and	r3, r3, #32
 367              		.loc 1 95 8 discriminator 1
 368 0012 002B     		cmp	r3, #0
 369 0014 F9D0     		beq	.L13
  96:./Src/stm32f767zi_usart.c **** 		;
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 9


  97:./Src/stm32f767zi_usart.c **** 	return USARTx->RDR & 0xFFU;
 370              		.loc 1 97 15
 371 0016 7B68     		ldr	r3, [r7, #4]
 372 0018 5B6A     		ldr	r3, [r3, #36]
 373              		.loc 1 97 21
 374 001a DBB2     		uxtb	r3, r3
  98:./Src/stm32f767zi_usart.c **** }
 375              		.loc 1 98 1
 376 001c 1846     		mov	r0, r3
 377 001e 0C37     		adds	r7, r7, #12
 378              	.LCFI15:
 379              		.cfi_def_cfa_offset 4
 380 0020 BD46     		mov	sp, r7
 381              	.LCFI16:
 382              		.cfi_def_cfa_register 13
 383              		@ sp needed
 384 0022 80BC     		pop	{r7}
 385              	.LCFI17:
 386              		.cfi_restore 7
 387              		.cfi_def_cfa_offset 0
 388 0024 7047     		bx	lr
 389              		.cfi_endproc
 390              	.LFE4:
 392              		.section	.text.__io_putchar,"ax",%progbits
 393              		.align	1
 394              		.global	__io_putchar
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 399              	__io_putchar:
 400              	.LFB5:
  99:./Src/stm32f767zi_usart.c **** 
 100:./Src/stm32f767zi_usart.c **** int __io_putchar(int ch)
 101:./Src/stm32f767zi_usart.c **** {
 401              		.loc 1 101 1
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 8
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405 0000 80B5     		push	{r7, lr}
 406              	.LCFI18:
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 7, -8
 409              		.cfi_offset 14, -4
 410 0002 82B0     		sub	sp, sp, #8
 411              	.LCFI19:
 412              		.cfi_def_cfa_offset 16
 413 0004 00AF     		add	r7, sp, #0
 414              	.LCFI20:
 415              		.cfi_def_cfa_register 7
 416 0006 7860     		str	r0, [r7, #4]
 102:./Src/stm32f767zi_usart.c **** 	usart_write(USART3, ch);
 417              		.loc 1 102 2
 418 0008 7B68     		ldr	r3, [r7, #4]
 419 000a DBB2     		uxtb	r3, r3
 420 000c 1946     		mov	r1, r3
 421 000e 0448     		ldr	r0, .L17
 422 0010 FFF7FEFF 		bl	usart_write
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 10


 103:./Src/stm32f767zi_usart.c **** 	return ch;
 423              		.loc 1 103 9
 424 0014 7B68     		ldr	r3, [r7, #4]
 104:./Src/stm32f767zi_usart.c **** }
 425              		.loc 1 104 1
 426 0016 1846     		mov	r0, r3
 427 0018 0837     		adds	r7, r7, #8
 428              	.LCFI21:
 429              		.cfi_def_cfa_offset 8
 430 001a BD46     		mov	sp, r7
 431              	.LCFI22:
 432              		.cfi_def_cfa_register 13
 433              		@ sp needed
 434 001c 80BD     		pop	{r7, pc}
 435              	.L18:
 436 001e 00BF     		.align	2
 437              	.L17:
 438 0020 00480040 		.word	1073760256
 439              		.cfi_endproc
 440              	.LFE5:
 442              		.section	.text.__io_getchar,"ax",%progbits
 443              		.align	1
 444              		.global	__io_getchar
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 449              	__io_getchar:
 450              	.LFB6:
 105:./Src/stm32f767zi_usart.c **** 
 106:./Src/stm32f767zi_usart.c **** int __io_getchar(void)
 107:./Src/stm32f767zi_usart.c **** {
 451              		.loc 1 107 1
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 1, uses_anonymous_args = 0
 455 0000 80B5     		push	{r7, lr}
 456              	.LCFI23:
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 00AF     		add	r7, sp, #0
 461              	.LCFI24:
 462              		.cfi_def_cfa_register 7
 108:./Src/stm32f767zi_usart.c **** 	return usart_read(USART3);
 463              		.loc 1 108 9
 464 0004 0248     		ldr	r0, .L21
 465 0006 FFF7FEFF 		bl	usart_read
 466 000a 0346     		mov	r3, r0
 109:./Src/stm32f767zi_usart.c **** }...
 467              		.loc 1 109 1
 468 000c 1846     		mov	r0, r3
 469 000e 80BD     		pop	{r7, pc}
 470              	.L22:
 471              		.align	2
 472              	.L21:
 473 0010 00480040 		.word	1073760256
 474              		.cfi_endproc
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 11


 475              	.LFE6:
 477              		.text
 478              	.Letext0:
 479              		.file 2 "e:\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\machine\\_default_types.h"
 480              		.file 3 "e:\\gcc-arm-none-eabi-10.3-2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 481              		.file 4 "./Inc/stm32f767zi_hal.h"
ARM GAS  C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f767zi_usart.c
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:18     .text.usart2_default_init:00000000 $t
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:24     .text.usart2_default_init:00000000 usart2_default_init
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:92     .text.usart2_default_init:00000064 $d
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:100    .text.usart3_default_init:00000000 $t
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:106    .text.usart3_default_init:00000000 usart3_default_init
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:172    .text.usart3_default_init:00000064 $d
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:179    .text.usart3_interrupt_default_init:00000000 $t
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:185    .text.usart3_interrupt_default_init:00000000 usart3_interrupt_default_init
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:268    .text.usart3_interrupt_default_init:00000080 $d
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:276    .text.usart_write:00000000 $t
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:282    .text.usart_write:00000000 usart_write
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:335    .text.usart_read:00000000 $t
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:341    .text.usart_read:00000000 usart_read
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:393    .text.__io_putchar:00000000 $t
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:399    .text.__io_putchar:00000000 __io_putchar
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:438    .text.__io_putchar:00000020 $d
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:443    .text.__io_getchar:00000000 $t
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:449    .text.__io_getchar:00000000 __io_getchar
C:\Users\DCS_LAB\AppData\Local\Temp\ccVaGHbu.s:473    .text.__io_getchar:00000010 $d

UNDEFINED SYMBOLS
gpio_set_mode
